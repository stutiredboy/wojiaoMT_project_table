
局部引用 VS 全局引用
	在 JNI 中创建对象得到的引用也由 JVM 管理，会被垃圾收集。 比如 NewObject, NewString, 
	NewObjectArray NewXXXArray等。在native方法返回以后，所有的对象如果没有被引用，都会被回收。
	如果需要在JNI中保持引用，需要创建和使用全局引用。全局引用将在显式释放之前一直有效，
	您必须记住去显式地释放它。没有释放引用可能导致内存泄漏。使用 NewGlobalRef() 创建全局引用，
	并用 DeleteGlobalRef() 删除它，如下面的代码样本所示：

	 1. /* This code is valid! */
	 2. static jmethodID mid;
	 3. 
	 4. JNIEXPORT jstring JNICALL
	 5. Java_Sample1_accessMethod(JNIEnv *env, jobject obj)
	 6. {
	 7.    ...
	 8.	 cls = (*env)->GetObjectClass(env, obj);
	 9.    if (cls != 0)
	10.    {
	11.       mid1 = (*env)->GetStaticMethodID(env, cls, "addInt", "(I)I");
	12.       mid = (*env)->NewGlobalRef(env, mid1);
	13.    ...
	14. }

JNI 使用数组
	通常，处理数组时，首先想到要做的是确定其大小。为了做到这一点，应该
	使用 GetArrayLength() 函数，它返回一个表示数组大小的 jsize。
	接下来，会想要获取一个指向数组元素的指针。可以使用 GetXXXArrayElement() 
	和 SetXXXArrayElement() 函数（根据数组的类型替换方法名中的 XXX：Object、
	Boolean、Byte、Char、Int、Long 等等）来访问数组中的元素。
	当本机代码完成了对 Java 数组的使用时，必须调用函数 ReleaseXXXArrayElements() 来释放它。
	否则，可能导致内存泄漏。下面的代码段显示了如何循环遍历一个整型数组的所有元素：

	 1. /* Looping through the elements in an array. */
	 2. int* elem = (*env)->GetIntArrayElements(env, intArray, 0);
	 3. for (i=0; I < (*env)->GetIntArrayLength(env, intArray); i++)
	 4.    sum += elem[i]
	 5. (*env)->ReleaseIntArrayElements(env, intArray, elem, 0);

	使用String的时候，也有类似的规则。对应的函数：GetStringUTFChars，ReleaseStringUTFChars。

JNI 内存管理总结
	没有Delete方法，这个和java对应。无法直接存取访问jobject的数据。
	比如jarray,jstring。只能通过GetXXX,SetXXX,ReleaseXXX方法进行管理。
	NewXXX方法得到的jobect引用可以通过返回值，或者回调传递给java。

JNI 抛出异常和处理
	有两种方法用来在本机代码中抛出异常：可以调用 Throw() 函数或 ThrowNew() 函数。
	在调用 Throw() 之前，首先需要创建一个 Throwable 类型的对象。
	可以通过调用 ThrowNew() 跳过这一步，因为这个函数为您创建了该对象。
	在下面的示例代码片段中，我们使用这两个函数抛出 IOException：

	 1. /* Create the Throwable object. */
	 2. jclass cls = (*env)->FindClass(env, "java/io/IOException");
	 3. jmethodID mid = (*env)->GetMethodID(env, cls, "<init>", "()V");
	 4. jthrowable e = (*env)->NewObject(env, cls, mid);
	 5. 
	 6. /* Now throw the exception */
	 7. (*env)->Throw(env, e);
	 8. ...
	 9. 
	10. /* Here we do it all in one step and provide a message*/
	11. (*env)->ThrowNew(env,
	12.                  (*env)->FindClass("java/io/IOException"),
	13.                  "An IOException occurred!");


	Throw() 和 ThrowNew() 函数并不中断本机方法中的控制流。
	直到本机方法返回，在 JVM 中才会将异常实际抛出。
	在 C 中，一旦碰到错误条件，不能使用 Throw() 和 ThrowNew() 函数立即退出方法，
	而在 Java 中，这可以使用 throw 语句来退出方法。相反，需要在 Throw() 和 ThrowNew() 
	函数之后立即使用 return 语句，以便在出错点退出本机方法。


	JNI 的异常捕获函数
	当从 C 或 C++ 调用 Java 时，也可能需要捕获异常。许多 JNI 函数都能抛出希望捕获的异常。
	ExceptionCheck() 函数返回 jboolean 以表明是否抛出了异常，而 ExceptionOccured() 方法返回
	指向当前异常的 jthrowable 引用（或者返回 NULL，如果未抛出异常的话）。
	如果正在捕获异常，可能要处理异常，在这种情况下需要在 JVM 中清除该异常。
	可以使用 ExceptionClear() 函数来进行这个操作。ExceptionDescribed() 函数用来显示异常的调试消息。


本机方法中的多线程

	在使用 JNI 工作时，您将遇到的更高级的问题之一是在本机方法中使用多线程。
	即使是在不需要支持多线程的系统上运行时，Java 平台也是作为多线程系统来实现的；
	因此您有责任确保本机函数是线程安全的。

	在 Java 程序中，可以通过使用 synchronized 语句实现线程安全的代码。
	synchronized 语句的语法使您能够获取对象上的锁。只要在 synchronized 块中，
	就可以执行任何数据操作，而不必担心其它线程会悄悄进入并访问您锁定的对象。

	JNI 使用 MonitorEnter() 和 MonitorExit() 函数提供类似的结构。
	对于传递到 MonitorEnter() 函数中的对象，您会得到一个用于该对象的监视器（锁），
	并在使用 MonitorExit() 函数释放它之前一直持有该锁。对于您锁定的对象而言，
	MonitorEnter() 和 MonitorExit() 函数之间的所有代码保证是线程安全的。
	java与c++的同步代码对应关系。

	-------------------------+----------------------------
	        java             |      c++
	-------------------------+----------------------------
	synchronized(obj) {      |    env->MonitorEnter(obj);
	  // synchronized block  |    // synchronized block
	}                        |    env->MonitorExit(obj);
	-------------------------+----------------------------

	确保本机方法同步的另一种方法是：当在 Java 类中声明 native 方法时使用 synchronized 关键字。
	使用 synchronized 关键字将确保任何时候从 Java 程序调用 native 方法，它都将是 synchronized。
	尽管用 synchronized 关键字来标记线程安全的本机方法是个好想法，但通常最好总是在本机方法实现中实现同步。
	这样做的主要原因如下：
		. C 或 C++ 代码和 Java 本机方法声明不同，因此，如果方法声明有变动（即，如果一旦除去了 synchronized 关键字），
		  此方法可能马上不再是线程安全的了。
		. 如果有人对使用该函数的其它本机方法（或其它 C 或 C++ 函数）进行编码，他们可能并没有意识到该本机实现不是线程安全的。
		. 如果将函数作为普通的 C 函数在 Java 程序之外使用，则它不是线程安全的。 


	其它同步技术
	Object.wait()、Object.notify() 和 Object.notifyAll() 方法也支持线程同步。
	因为所有 Java 对象都将 Object 类作为父类，所以所有 Java 对象都有这些方法。
	您可以象调用其它方法一样，从本机代码调用这些方法，并以 Java 代码中相同的
	方式来使用它们，以实现线程同步。

